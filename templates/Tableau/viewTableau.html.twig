{% include 'alert.html.twig' %}


<!-- Content Starts -->
<div class="ui-content">
  <div class="conteneurProjet">

  	<h1>{{ tableau.libelle }}</h1>

    <div class="alertBloc">

          <div class="alert alert-success">
              <i class="far fa-check-square"></i> Modification effectuée avec succès
              <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
          </div>


          <div class="alert alert-danger">
              <i class="far fa-times-circle"></i> Modification impossible, une erreur est survenue
              <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
          </div>

  </div>
  	
  	<!-- Ajout de table -->
    {% if app.user is same as(projet.fkOwner) %}  

    <div class="row adderTable menuButtonLine  flex-row-reverse dropdown">
      <button id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"class="btn btn-secondary"><i class="fas fa-bars"></i></button>
      <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <a class="dropdown-item" data-toggle="modal" data-target="#modaleAjoutSprint" href="#">Ajouter un sprint</button>
        <a class="dropdown-item" data-toggle="modal" data-target="#deleteTable"  href="#">Supprimer le tableau</a>
      </div>
    </div> 

    {% endif %}
    <!-- Fin d'Ajout de table -->

    <!-- Affichage des Sprints -->
    {% for sprint in sprints %}
  	<div class="row">
	  	<div class="containerSprint col-md-12">
	  		<table class="sprint-table col-md-12">
	  			<thead >
	  				<tr>
		  				<th style="width: 10px;"></th>
		  				<th style="color: {{ sprint.fkColor.hexa }};"><h3>{{ sprint.libelle }}</h3></th>
		  				<th class="text-center">Person</th>
		  				<th class="text-center">Status</th>
		  				<th class="text-center">Priority</th>
		  				<th class="text-center">deadline</th>
		  			</tr>
	  			</thead>

	  			<tbody>
	  				{% for tache in sprint.taches %}
	  				<tr>
		  				<td style="width: 10px; background-color:{{ sprint.fkColor.hexa }};" class=""></td>
		  				<td class="text-cell td-sprint-table col-md-5">
                <input  value="{{ tache.libelle }}" 
                        class="form-control inputFull inputLibelleTache" 
                        data-tache-id="{{ tache.id }}"
                        data-comparative-value="{{ tache.libelle }}"
                        data-target-modif="{{ constant('App\\Controller\\TacheController::TACHE_LIBELLE') }}" />
              </td>
              <!-- /* TODO Insertion de l'image de la personne si elle existe */ -->
		  				<td class="text-cell td-sprint-table text-center col-md-1"> <img src="{{ asset('images/profil/man.png') }}" alt="Profile Picture" class="img-responsive" width="30" height="30"></td>
		  				<td id="selectorStatus_{{ sprint.id }}_{{ tache.id }}"
                  class="td-sprint-table hvr-curl-top-right font-weight-bold text-center tdPointer col-md-2 tdSelector StatusSelector"
                  data-toggle="popover" 
                  tabindex="0"
                  data-trigger="focus"               
                  title="Status selector"
                  data-content='{% for statut in status %}
                                  <button data-tache-id="{{ tache.id }}" 
                                          data-type-id="{{ statut.id }}"
                                          data-target-modif="{{ constant('App\\Controller\\TacheController::TACHE_STATUT') }}"
                                          data-to-change="selectorStatus_{{ sprint.id }}_{{ tache.id }}"
                                          class="btn btn-success form-control BtnSelector" 
                                          style="color:#fff; 
                                          background-color:{{ statut.fkColor.hexa }};"> 
                                    {{ statut.libelle }} 
                                  </button> 
                                {% endfor %}'
                  style="color:#fff; background-color:{{ tache.fkStatut.fkColor.hexa }};">{{ tache.fkStatut.libelle }}
              </td>
		  				<td id="selectorPriority_{{ sprint.id }}_{{ tache.id }}"
                  class="td-sprint-table hvr-curl-top-right font-weight-bold text-center tdPointer col-md-2 tdSelector PioritySelector"
                  data-toggle="popover" 
                  tabindex="0"
                  data-trigger="focus"               
                  title="Priority selector"
                  data-content='{% for priority in priorities %}
                                  <button data-tache-id="{{ tache.id }}" 
                                          data-type-id="{{ priority.id }}"
                                          data-target-modif="{{ constant('App\\Controller\\TacheController::TACHE_PRIORITE') }}"
                                          data-to-change="selectorStatus_{{ sprint.id }}_{{ tache.id }}"
                                          class="btn btn-success form-control BtnSelector" 
                                          style="color:#fff; 
                                          background-color:{{ priority.fkColor.hexa }};"> 
                                    {{ priority.libelle }} 
                                  </button> 
                                {% endfor %}'
                  style="color:#fff; background-color:{{ tache.fkPriorite.fkColor.hexa }};">{{ tache.fkPriorite.libelle }}
              </td>
		  				<td class="text-cell td-sprint-table text-center col-md-2">
                <div class="input-group date" id="datetimepicker3" data-target-input="nearest">
                  <input  type="text" 
                          name="deadline" 
                          class="form-control datetimepicker-input data-input inputFull inputDate" 
                          data-target="#datetimepicker3"
                          data-tache-id="{{ tache.id }}"
                          data-target-modif="{{ constant('App\\Controller\\TacheController::TACHE_DEADLINE') }}"
                          value="{% if tache.deadline %}{{ tache.deadline|date('d/m/Y') }}{% endif %}"/>
                  <div class="input-group-append inputFull" data-target="#datetimepicker3" data-toggle="datetimepicker">
                      <div class="input-group-text inputFull"><i class="fa fa-calendar"></i></div>
                  </div>
                </div>
              </td>
		  			</tr>
		  			{% endfor %}
	  			</tbody>
	  		</table>

        <!-- Bouton d'ajout de nouvelle tâche dans un sprint -->
	  		<div class="col-md-12">
		  		<button data-toggle="modal" data-target="#modaleAjoutTache" data-sprint="{{ sprint.id }}" class="btn btn-success btn-add-tache float-right"><i class="fas fa-plus"></i> ADD</button>
		  	</div>
	  	</div>

	</div>
	{% endfor %}
	<!-- Fin d'Affichage des Sprints -->
 </div>
</div>


<!-- ############################### Fenêtres modales ###################################################### -->

<!-- Fenêtre modale d'ajout de nouveau sprint -->
<div id="modaleAjoutSprint" class="modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Nouveau Tableau</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="form-group">
          <label for="libelleSprint">Titre du Sprint</label>
          <input type="text" maxlength="50" class="form-control data-input" id="libelleSprint" name="libelleSprint" placeholder="Sprint name">
        </div>
        <div class="form-group">
          <label for="picker">Couleur</label>
          <div class="picker"></div>
          <input type="hidden" name="colorHex" id="colorHex" class="data-input" value="">
        </div>
        <input type="hidden" class="data-input" name="fkTableau" value="{{ tableau.id }}">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary modalAdder" modale-name="#modaleAjoutSprint" data-page="viewTableau/{{ tableau.id }}" href="addSprint">Créer le sprint</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
      </div>
    </div>
  </div>
</div>

<!-- Fenêtre modale de supression d'un tableau -->
<div id="deleteTable" class="modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Supprimer le Tableau ?</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Attention,cette action supprimera définitivement le tableau. Voulez vous continuer ? </p>
      </div>
      <div class="modal-footer">
        <a type="button" class="btn btn-danger" modale-name="#deleteTable" href="deleteTableau/{{ tableau.id }}">Supprimer le Tableau</a>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
      </div>
    </div>
  </div>
</div>

<!-- Fenêtre modale d'ajout de nouvelle tache -->
<div id="modaleAjoutTache" class="modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Nouvelle tâche</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">

        <div class="form-group">
          <label for="libelleTache">Descriptif de la tâche</label>
          <input type="text" maxlength="50" class="form-control data-input" id="libelleTache" name="libelleTache" placeholder="Chose à faire ...">
        </div>

        <div class="form-group">
          <label for="libelleTache">Deadline</label>
           <div class="input-group date" id="datetimepicker4" data-target-input="nearest">
              <input type="text" name="deadline" class="form-control datetimepicker-input data-input" data-target="#datetimepicker4"/>
              <div class="input-group-append" data-target="#datetimepicker4" data-toggle="datetimepicker">
                  <div class="input-group-text"><i class="fa fa-calendar"></i></div>
              </div>
            </div>
        </div>

        <div class="form-group">
          <label for="commentTache">Commentaire (optionel)</label>
          <textarea type="text" maxlength="250" class="form-control data-input" id="commentTache" name="commentTache" placeholder="Commentaire ou lien"></textarea>
        </div>

        <div class="form-check">
          <input type="checkbox" class="form-check-input data-check-input" id="userTache" value="1" name="userTache">
          <label class="form-check-label" for="userTache">M'attibuer cette tache</label>
        </div>

        <input type="hidden" class="data-input" name="fkSprint" id="fkSprint" value="">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary modalAdder" modale-name="#modaleAjoutTache" data-page="viewTableau/{{ tableau.id }}" href="addTache">Créer la tâche</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
      </div>
    </div>
  </div>
</div>


<!-- ############################### Fenêtres modales ###################################################### -->
<script>

	// ---- Mise en place du color picker avec les données en BDD
  $(".picker").colorPick();

  $(".picker").colorPick({
  	'initialColor' : '#74b9ff',
  	'palette': [
  	 {% for color in colors %}
  		"{{ color.hexa }}", 
  	 {% endfor %}
  	],
  	'onColorSelected': function() {
  		this.element.css({'backgroundColor': this.color, 'color': this.color});
  	},
  	'paletteLabel': 'Couleur du sprint'
  });

  // Mise en input de la valeur Hexa de la couleur sélectionée
  $(".picker").click(function() {
  	$(".colorPickButton").click(function() {
  		$('#colorHex').val($(this).attr('hexvalue'));
    })
  });

  $(function () {
      $(".alert").remove(); 

      $('#datetimepicker4').datetimepicker({
          format: 'DD/MM/YYYY'
      });
      $('#datetimepicker3').datetimepicker({
          format: 'DD/MM/YYYY'
      });

      // Mise a jour de la modale d'ajout avec les infos du sprint sélectionné
      $('.btn-add-tache').click(function(){
        $('#fkSprint').val($(this).attr('data-sprint'));
      });

      //implémentation du PopOver
      $('[data-toggle="popover"]').popover({
        placement: "bottom",
        autofocus: false,
        html: true
      }); 

      // Application de la sélection du picker personnalisé (status et priority)
      $('.tdSelector').click(function(){
        var selector = $(this);
        $('.BtnSelector').click(function(){

          // -------------> Modifications Visuelles
          selector.css('backgroundColor', $(this).css('backgroundColor'));
          selector.html($(this).text());

          //--------------> Modification BDD
          genericFetch('updateTache/'+ $(this).attr('data-target-modif')+'-' + $(this).attr('data-tache-id') + '-' + $(this).attr('data-type-id'));
        });
      });

      // Mise a jour des champs de libellé des tâches
      // La mise a jour est effectuée uniquement quand les libellés sont modifiés
      $('.inputLibelleTache').focusout(function(){
          if($(this).val() !== $(this).attr('data-comparative-value')){
            genericFetch('updateTache/'+ $(this).attr('data-target-modif')+'-'+ $(this).attr('data-tache-id') +'-'+ $(this).val());
            $(this).attr('data-comparative-value', $(this).val());
          }
      });

      // Mise a jour de la date de deadline d'une tâche
      // La mise a jour est effectuée uniquement en cas de modification
      $('.inputDate').focusout(function(){
          genericFetch('updateTache/'+ $(this).attr('data-target-modif')+'-'+ $(this).attr('data-tache-id') +'-'+ $(this).val().split('/').join('='));
      });
      
  });


  async function genericFetch(fname){
    var str = await fetch(fname);
    var alert = await str.text();
    if(alert === 'ok'){
      $('.alertBloc').html('<div class="alert alert-success">'+
              '<i class="far fa-check-square"></i> Modification effectuée avec succès'+
              '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'+
          '</div>');
    }else{
      $('.alertBloc').html('<div class="alert alert-danger">'+
              '<i class="far fa-check-square"></i> Modification impossible, une erreur est survenue'+
              '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'+
          '</div>');
    }
    $('body').append(alert);
    hideAlert();
  }

</script>